package com.mtkresearch.breezeapp.engine.model

import com.mtkresearch.breezeapp.engine.runner.guardian.GuardianMaskingResult

/**
 * Represents a unified event in a concurrent streaming chat session.
 * This sealed class allows the client to react to different types of real-time events
 * from a single, coherent Flow.
 */
sealed class StreamingChatResult {
    /**
     * A new piece of content has been generated by the LLM.
     * This is sent to the client with minimal latency.
     *
     * @param inferenceResult The raw inference result containing the text chunk.
     */
    data class Content(val inferenceResult: InferenceResult) : StreamingChatResult()

    /**
     * A masking action has been determined by the Guardian.
     * The client should apply this mask to the already-rendered text.
     *
     * @param maskingAction The details of the masking operation.
     */
    data class Mask(val maskingAction: GuardianMaskingResult) : StreamingChatResult()

    /**
     * The stream has completed successfully.
     *
     * @param finalFullText The complete, final text of the response.
     */
    data class Complete(val finalFullText: String) : StreamingChatResult()

    /**
     * An error occurred during the streaming process.
     *
     * @param error The details of the error.
     */
    data class Error(val error: RunnerError) : StreamingChatResult()
}